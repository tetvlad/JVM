public class JvmComprehension {

    public static void main(String[] args) {
        // Переменная типа int помещается в Stack Frame
        // Значение равное 1 записывается в стеке
        int i = 1;                      // 1


        // ВЫделили память в куче, записываются данные и тип (ссылочный)
        Object o = new Object();        // 2

        // JVM преобразует двойку в объект Integer, так же выделяет память в куче.
        // В конечно итоге записала в объект двойку.
        Integer ii = 2;                 // 3

        // Вызвали метод Print
        // o - ссылка на объект
        // i - целочисленное значение
        // ii - ссылка
        // Создается новый Steck Frame для метода Print
        printAll(o, i, ii);             // 4


        // finished - строковый литерал. JVM помещает его в кучу,
        // в специальную оласть памяти - String Pool. JVM проверяет ,
        // если такая строка есть, то возвращает ссылку на существующий объект.
        // Если нет то создает новый String объект в пуле
        // Далее вызов метода println и вывод на консоль
        System.out.println("finished"); // 7

        // после отработки 7-ой строки Stack Frame main удаляется.
        // Все локальные переменные исчезают из фрейма
        // Сам строковый литерал finished удаляется
        // JVM выполнила свою работу и отключается.
    }

    private static void printAll(Object o, int i, Integer ii) {

        // Аналогично пункту 2, только если значения нет в кэше (а его нет,
        // JVM выделяет новый блок памяти в куче)
        Integer uselessVar = 700;                   // 5

        // JVM смотрит ссылку, находит объект в куче по этой ссылке
        // Вызывает метод toString
        // Строка помещается в стек фрейма PrintAll
        // i преобразуется в единицу, после конкатенации результат уходит в стек
        // ii - ссылка на объект. Метод toString объекта возвращает двойку
        // Снова конкатенация, итог уходит обратно в стек
        // JVM получает ссылку на объект System.out, вызывается метод print,
        // полученная до этого строка из стека передается
        // как аргумент и выводится на консоль
        System.out.println(o.toString() + i + ii);  // 6
    }

}